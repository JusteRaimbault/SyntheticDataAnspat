}
show(etoadd);
show(V(currentg)$name[V(currentg)$name=="30"])
attrs = e_attr_list
attrs[["length"]] = elengths
currentg = add_edges(graph=currentg,edges = etoadd,attr = attrs)
return(currentg)
}
addPoints(trgraph,matrix(c(661796,6881580),nrow=1),list(),list(speed=c(0.5)))
addPoints<-function(g,coords,v_attr_list,e_attr_list){
currentvid = max(as.numeric(V(g)$name)) + 1
attrs = v_attr_list
attrs[["name"]] = as.character(currentvid:(currentvid+nrow(coords)-1))
attrs[["station"]] = rep(FALSE,nrow(coords))
attrs[["x"]] = coords[,1];attrs[["y"]] = coords[,2]
currentg = add_vertices(graph = g,nv=nrow(coords),attr = attrs)
show(currentg)
etoadd = c();elengths=c()
for(k in 1:nrow(coords)){
stations = data.frame(id=V(currentg)$name[V(currentg)$station==TRUE],x=V(currentg)$x[V(currentg)$station==TRUE],y=V(currentg)$y[V(currentg)$station==TRUE])
show(dim(stations))
dists = sqrt((stations$x - coords[k,1])^2 + (stations$y - coords[k,2])^2)
show(length(dists))
closest_station_id = stations$id[which(dists==min(dists))[1]]
etoadd = append(etoadd,c(attrs[["name"]][k],closest_station_id))
elengths=append(elengths,min(dists))
}
show(etoadd);
show(V(currentg)$name[V(currentg)$name=="30"])
attrs = e_attr_list
attrs[["length"]] = elengths
currentg = add_edges(graph=currentg,edges = etoadd,attr = attrs)
return(currentg)
}
addPoints(trgraph,matrix(c(661796,6881580),nrow=1),list(),list(speed=c(0.5)))
addPoints<-function(g,coords,v_attr_list,e_attr_list){
currentvid = max(as.numeric(V(g)$name)) + 1
attrs = v_attr_list
attrs[["name"]] = as.character(currentvid:(currentvid+nrow(coords)-1))
attrs[["station"]] = rep(FALSE,nrow(coords))
attrs[["x"]] = coords[,1];attrs[["y"]] = coords[,2]
currentg = add_vertices(graph = g,nv=nrow(coords),attr = attrs)
show(currentg)
etoadd = c();elengths=c()
for(k in 1:nrow(coords)){
stations = data.frame(id=V(currentg)$name[V(currentg)$station==TRUE],x=V(currentg)$x[V(currentg)$station==TRUE],y=V(currentg)$y[V(currentg)$station==TRUE])
dists = sqrt((stations$x - coords[k,1])^2 + (stations$y - coords[k,2])^2)
closest_station_id = stations$id[which(dists==min(dists))[1]]
etoadd = append(etoadd,c(attrs[["name"]][k],closest_station_id))
elengths=append(elengths,min(dists))
}
show(etoadd);
show(V(currentg)$name[V(currentg)$name==etoadd[1]])
show(V(currentg)$name[V(currentg)$name==etoadd[2]])
attrs = e_attr_list
attrs[["length"]] = elengths
currentg = add_edges(graph=currentg,edges = etoadd,attr = attrs)
return(currentg)
}
addPoints(trgraph,matrix(c(661796,6881580),nrow=1),list(),list(speed=c(0.5)))
addPoints<-function(g,coords,v_attr_list,e_attr_list){
currentvid = max(as.numeric(V(g)$name)) + 1
attrs = v_attr_list
attrs[["name"]] = as.character(currentvid:(currentvid+nrow(coords)-1))
attrs[["station"]] = rep(FALSE,nrow(coords))
attrs[["x"]] = coords[,1];attrs[["y"]] = coords[,2]
currentg = add_vertices(graph = g,nv=nrow(coords),attr = attrs)
show(currentg)
show(V(currentg)$name[V(currentg)$name=="30"])
etoadd = c();elengths=c()
for(k in 1:nrow(coords)){
stations = data.frame(id=V(currentg)$name[V(currentg)$station==TRUE],x=V(currentg)$x[V(currentg)$station==TRUE],y=V(currentg)$y[V(currentg)$station==TRUE])
dists = sqrt((stations$x - coords[k,1])^2 + (stations$y - coords[k,2])^2)
closest_station_id = stations$id[which(dists==min(dists))[1]]
etoadd = append(etoadd,c(attrs[["name"]][k],closest_station_id))
elengths=append(elengths,min(dists))
}
show(etoadd);
show(V(currentg)$name[V(currentg)$name==etoadd[1]])
show(V(currentg)$name[V(currentg)$name==etoadd[2]])
attrs = e_attr_list
attrs[["length"]] = elengths
currentg = add_edges(graph=currentg,edges = etoadd,attr = attrs)
return(currentg)
}
addPoints(trgraph,matrix(c(661796,6881580),nrow=1),list(),list(speed=c(0.5)))
addPoints<-function(g,coords,v_attr_list,e_attr_list){
currentvid = max(as.numeric(V(g)$name)) + 1
attrs = v_attr_list
attrs[["name"]] = as.character(currentvid:(currentvid+nrow(coords)-1))
attrs[["station"]] = rep(FALSE,nrow(coords))
attrs[["x"]] = coords[,1];attrs[["y"]] = coords[,2]
currentg = add_vertices(graph = g,nv=nrow(coords),attr = attrs)
etoadd = c();elengths=c()
for(k in 1:nrow(coords)){
stationscoords = data.frame(id=V(currentg)$name[V(currentg)$station==TRUE],x=V(currentg)$x[V(currentg)$station==TRUE],y=V(currentg)$y[V(currentg)$station==TRUE])
dists = sqrt((stationscoords$x - coords[k,1])^2 + (stationscoords$y - coords[k,2])^2)
closest_station_id = stationscoords$id[which(dists==min(dists))[1]]
etoadd = append(etoadd,c(attrs[["name"]][k],closest_station_id))
elengths=append(elengths,min(dists))
}
attrs = e_attr_list
attrs[["length"]] = elengths
currentg = add_edges(graph=currentg,edges = etoadd,attr = attrs)
return(currentg)
}
addPoints(trgraph,matrix(c(661796,6881580),nrow=1),list(),list(speed=c(0.5)))
rm(stations)
#' add vertices, connecting to closest stations
addPoints<-function(g,coords,v_attr_list,e_attr_list){
currentvid = max(as.numeric(V(g)$name)) + 1
attrs = v_attr_list
attrs[["name"]] = as.character(currentvid:(currentvid+nrow(coords)-1))
attrs[["station"]] = rep(FALSE,nrow(coords))
attrs[["x"]] = coords[,1];attrs[["y"]] = coords[,2]
currentg = add_vertices(graph = g,nv=nrow(coords),attr = attrs)
etoadd = c();elengths=c()
for(k in 1:nrow(coords)){
stationscoords = data.frame(id=V(currentg)$name[V(currentg)$station==TRUE],x=V(currentg)$x[V(currentg)$station==TRUE],y=V(currentg)$y[V(currentg)$station==TRUE])
dists = sqrt((stationscoords$x - coords[k,1])^2 + (stationscoords$y - coords[k,2])^2)
closest_station_id = stationscoords$id[which(dists==min(dists))[1]]
etoadd = append(etoadd,c(attrs[["name"]][k],closest_station_id))
elengths=append(elengths,min(dists))
}
attrs = e_attr_list
attrs[["length"]] = elengths
currentg = add_edges(graph=currentg,edges = etoadd,attr = attrs)
return(currentg)
}
addPoints(trgraph,matrix(c(661796,6881580),nrow=1),list(),list(speed=c(0.5)))
#' add vertices, connecting to closest stations
addPoints<-function(g,coords,v_attr_list,e_attr_list){
currentvid = max(as.numeric(V(g)$name)) + 1
attrs = v_attr_list
attrs[["name"]] = as.character(currentvid:(currentvid+nrow(coords)-1))
attrs[["station"]] = rep(FALSE,nrow(coords))
attrs[["x"]] = coords[,1];attrs[["y"]] = coords[,2]
currentg = add_vertices(graph = g,nv=nrow(coords),attr = attrs)
show(currentg$name)
etoadd = c();elengths=c()
for(k in 1:nrow(coords)){
stationscoords = data.frame(id=V(currentg)$name[V(currentg)$station==TRUE],x=V(currentg)$x[V(currentg)$station==TRUE],y=V(currentg)$y[V(currentg)$station==TRUE])
dists = sqrt((stationscoords$x - coords[k,1])^2 + (stationscoords$y - coords[k,2])^2)
closest_station_id = stationscoords$id[which(dists==min(dists))[1]]
etoadd = append(etoadd,c(attrs[["name"]][k],closest_station_id))
elengths=append(elengths,min(dists))
}
attrs = e_attr_list
attrs[["length"]] = elengths
currentg = add_edges(graph=currentg,edges = etoadd,attr = attrs)
return(currentg)
}
addPoints(trgraph,matrix(c(661796,6881580),nrow=1),list(),list(speed=c(0.5)))
#' add vertices, connecting to closest stations
addPoints<-function(g,coords,v_attr_list,e_attr_list){
currentvid = max(as.numeric(V(g)$name)) + 1
attrs = v_attr_list
attrs[["name"]] = as.character(currentvid:(currentvid+nrow(coords)-1))
attrs[["station"]] = rep(FALSE,nrow(coords))
attrs[["x"]] = coords[,1];attrs[["y"]] = coords[,2]
currentg = add_vertices(graph = g,nv=nrow(coords),attr = attrs)
show(V(currentg)$name)
etoadd = c();elengths=c()
for(k in 1:nrow(coords)){
stationscoords = data.frame(id=V(currentg)$name[V(currentg)$station==TRUE],x=V(currentg)$x[V(currentg)$station==TRUE],y=V(currentg)$y[V(currentg)$station==TRUE])
dists = sqrt((stationscoords$x - coords[k,1])^2 + (stationscoords$y - coords[k,2])^2)
closest_station_id = stationscoords$id[which(dists==min(dists))[1]]
etoadd = append(etoadd,c(attrs[["name"]][k],closest_station_id))
elengths=append(elengths,min(dists))
}
attrs = e_attr_list
attrs[["length"]] = elengths
currentg = add_edges(graph=currentg,edges = etoadd,attr = attrs)
return(currentg)
}
addPoints(trgraph,matrix(c(661796,6881580),nrow=1),list(),list(speed=c(0.5)))
addPoints<-function(g,coords,v_attr_list,e_attr_list){
currentvid = max(as.numeric(V(g)$name)) + 1
attrs = v_attr_list
attrs[["name"]] = as.character(currentvid:(currentvid+nrow(coords)-1))
attrs[["station"]] = rep(FALSE,nrow(coords))
attrs[["x"]] = coords[,1];attrs[["y"]] = coords[,2]
currentg = add_vertices(graph = g,nv=nrow(coords),attr = attrs)
show(V(currentg)$name)
etoadd = c();elengths=c()
for(k in 1:nrow(coords)){
stationscoords = data.frame(id=V(currentg)$name[V(currentg)$station==TRUE],x=V(currentg)$x[V(currentg)$station==TRUE],y=V(currentg)$y[V(currentg)$station==TRUE])
dists = sqrt((stationscoords$x - coords[k,1])^2 + (stationscoords$y - coords[k,2])^2)
show(stationscoords$id)
closest_station_id = stationscoords$id[which(dists==min(dists))[1]]
show(closest_station_id)
etoadd = append(etoadd,c(attrs[["name"]][k],closest_station_id))
elengths=append(elengths,min(dists))
}
attrs = e_attr_list
attrs[["length"]] = elengths
currentg = add_edges(graph=currentg,edges = etoadd,attr = attrs)
return(currentg)
}
addPoints(trgraph,matrix(c(661796,6881580),nrow=1),list(),list(speed=c(0.5)))
addPoints<-function(g,coords,v_attr_list,e_attr_list){
currentvid = max(as.numeric(V(g)$name)) + 1
attrs = v_attr_list
attrs[["name"]] = as.character(currentvid:(currentvid+nrow(coords)-1))
attrs[["station"]] = rep(FALSE,nrow(coords))
attrs[["x"]] = coords[,1];attrs[["y"]] = coords[,2]
currentg = add_vertices(graph = g,nv=nrow(coords),attr = attrs)
etoadd = c();elengths=c()
for(k in 1:nrow(coords)){
stationscoords = data.frame(id=V(currentg)$name[V(currentg)$station==TRUE],x=V(currentg)$x[V(currentg)$station==TRUE],y=V(currentg)$y[V(currentg)$station==TRUE])
stationscoords$id=as.character(stationscoords$id)
dists = sqrt((stationscoords$x - coords[k,1])^2 + (stationscoords$y - coords[k,2])^2)
closest_station_id = stationscoords$id[which(dists==min(dists))[1]]
etoadd = append(etoadd,c(attrs[["name"]][k],closest_station_id))
elengths=append(elengths,min(dists))
}
attrs = e_attr_list
attrs[["length"]] = elengths
currentg = add_edges(graph=currentg,edges = etoadd,attr = attrs)
return(currentg)
}
addPoints(trgraph,matrix(c(661796,6881580),nrow=1),list(),list(speed=c(0.5)))
testg = addPoints(trgraph,matrix(c(661796,6881580),nrow=1),list(),list(speed=c(0.5)))
E(testg)$speed
admin_layer='data/gis/communes.shp'
spath = strsplit(strsplit(admin_layer,'.shp')[[1]][1],'/')[[1]]
admin <- readOGR(paste(spath[1:(length(spath)-1)],collapse="/"),spath[length(spath)])
admin <- readOGR(paste(spath[1:(length(spath)-1)],collapse="/"),spath[length(spath)])
centroids = gCentroid(admin)
centroids
centroids@coords
centroids = gCentroid(admin,byid = TRUE)
centroids
admin$INSEE_COMM
as.character(admin$INSEE_COMM)
admin_layer
testadmin = addAdministrativeLayer(trgraph,"data/gis/communes.shp")
addPoints<-function(g,coords,v_attr_list,e_attr_list){
currentvid = max(as.numeric(V(g)$name)) + 1
attrs = v_attr_list
attrs[["name"]] = as.character(currentvid:(currentvid+nrow(coords)-1))
attrs[["station"]] = rep(FALSE,nrow(coords))
attrs[["x"]] = coords[,1];attrs[["y"]] = coords[,2]
currentg = add_vertices(graph = g,nv=nrow(coords),attr = attrs)
etoadd = c();elengths=c()
for(k in 1:nrow(coords)){
stationscoords = data.frame(id=V(currentg)$name[V(currentg)$station==TRUE],x=V(currentg)$x[V(currentg)$station==TRUE],y=V(currentg)$y[V(currentg)$station==TRUE])
stationscoords$id=as.character(stationscoords$id)
dists = sqrt((stationscoords$x - coords[k,1])^2 + (stationscoords$y - coords[k,2])^2)
closest_station_id = stationscoords$id[which(dists==min(dists))[1]]
etoadd = append(etoadd,c(attrs[["name"]][k],closest_station_id))
elengths=append(elengths,min(dists))
}
attrs = e_attr_list
attrs[["length"]] = elengths
currentg = add_edges(graph=currentg,edges = etoadd,attr = attrs)
return(currentg)
}
addAdministrativeLayer<-function(g,admin_layer,connect_speed=1){
spath = strsplit(strsplit(admin_layer,'.shp')[[1]][1],'/')[[1]]
admin <- readOGR(paste(spath[1:(length(spath)-1)],collapse="/"),spath[length(spath)])
centroids = gCentroid(admin,byid = TRUE)
return(addPoints(g,centroids@coords,list(CP=as.character(admin$INSEE_COMM)),list(speed=rep(connect_speed,length(admin)))))
}
testadmin = addAdministrativeLayer(trgraph,"data/gis/communes.shp")
testadmin
V(testadmin)$CP
addAdministrativeLayer<-function(g,admin_layer,connect_speed=1){
spath = strsplit(strsplit(admin_layer,'.shp')[[1]][1],'/')[[1]]
admin <- readOGR(paste(spath[1:(length(spath)-1)],collapse="/"),spath[length(spath)])
centroids = gCentroid(admin,byid = TRUE)
return(addPoints(g,centroids@coords,list(CP=as.character(admin$INSEE_COMM)),list(speed=rep(connect_speed,length(admin)))))
}
#testadmin = addAdministrativeLayer(trgraph,"data/gis/communes.shp")
addPointsLayer<-function(g,points_layer,connect_speed=1){
spath = strsplit(strsplit(points_layer,'.shp')[[1]][1],'/')[[1]]
points <- readOGR(paste(spath[1:(length(spath)-1)],collapse="/"),spath[length(spath)])
return(addPoints(g,points@coords,list(pointname=points$name),list(speed=rep(connect_speed,length(points)))))
}
fullgraph = addPointsLayer(comgraph,'data/gis/facs.shp')
comgraph = addAdministrativeLayer(trgraph,"data/gis/communes.shp")
fullgraph = addPointsLayer(comgraph,'data/gis/facs.shp')
fullgraph
V(fullgraph)$pointname
points_layer='data/gis/facs.shp'
spath = strsplit(strsplit(points_layer,'.shp')[[1]][1],'/')[[1]]
points <- readOGR(paste(spath[1:(length(spath)-1)],collapse="/"),spath[length(spath)])
points$id
points$name
addPointsLayer<-function(g,points_layer,connect_speed=1){
spath = strsplit(strsplit(points_layer,'.shp')[[1]][1],'/')[[1]]
points <- readOGR(paste(spath[1:(length(spath)-1)],collapse="/"),spath[length(spath)])
return(addPoints(g,points@coords,list(pointname=as.character(points$name)),list(speed=rep(connect_speed,length(points)))))
}
fullgraph = addPointsLayer(comgraph,'data/gis/facs.shp')
fullgraph
V(fullgraph)$pointname
setwd(paste0(Sys.getenv('MONITORAT'),'/L2AnalyseSpatiale/DM/SyntheticData'))
library(readODS)
library(dplyr)
library(ggplot2)
library(igraph)
##
data2016 <- as.tbl(read_ods(path = 'data/DataQuest_etus_2016.ods',col_names = TRUE,sheet = 'Etudiants'))
adresses <- as.tbl(read_ods(path='data/L2_comresid.ods',col_names=TRUE,sheet=2))
d<- as.tbl(read_ods(path='data/DM_21quest.ods',col_names=TRUE,sheet='Feuil1'))
data2016$DEPRES = sapply(data2016$Codresid,function(s){substr(s,1,2)})
## Data Generation global parameters
NEtus = 20
synth=data.frame(synthid=1:NEtus)
# seed for reproducibility
set.seed(1)
d$Domcode
adresses
adresses$CODPOST
help(intersect)
setdiff(adresses$CODPOST,d$Domcode)
synth$Domcode = sample(setdiff(adresses$CODPOST,d$Domcode),size=NEtus,replace = FALSE)
synth
0.06/60
0.06/100
0.06/30
0.06/20
0.06/50
0.06/5
source('network.R')
# construct network
# speeds : RER 60km.h-1 -> 0.001 min.m-1 ; Transilien 100kmh ; Metro 30kmh ; Tram 20kmh
# communes : car, 50kmh ; fac : pied 5kmh
# RER
trgraph=addTransportationLayer('data/gis/gares.shp','data/gis/rer_lignes.shp',speed=0.001)
# Transilien
trgraph=addTransportationLayer('data/gis/empty.shp','data/gis/train_banlieue_lignes.shp',g = trgraph,speed=6e-04)
# Metro
trgraph=addTransportationLayer('data/gis/metro_stations.shp','data/gis/test_metro.shp',g = trgraph,speed=0.002)
# Tram
trgraph=addTransportationLayer('data/gis/TCSP_arrets.shp','data/gis/TCSP_lignes.shp',g = trgraph,speed=0.003)
# add communes
comgraph = addAdministrativeLayer(trgraph,"data/gis/communes.shp",connect_speed = 0.0012)
# add destination facs
fullgraph = addPointsLayer(comgraph,'data/gis/facs.shp',connect_speed = 0.012)
fullgraph
fromids = c();for(cp in synth$Domcode){fromids=append(fromids,which(V(fullgraph)$CP==cp))}
fromids
toids = c();for(fac in c("P1","P7","P4","P8","P10","P12","UPEM")){toids = append(toids,which(V(fullgraph)$pointname==fac))}
synth$Domcode
fromids = c();for(cp in synth$Domcode){fromids=append(fromids,which(V(fullgraph)$CP==cp))}
fromids
fromids = c();for(cp in synth$Domcode){if(length(which(V(fullgraph)$CP==cp))>0){show(cp)};fromids=append(fromids,which(V(fullgraph)$CP==cp))}
synth$Domcode = sample(setdiff(adresses$CODCOM,d$Domcode),size=NEtus,replace = FALSE)
fromids = c();for(cp in synth$Domcode){if(length(which(V(fullgraph)$CP==cp))>0){show(cp)};fromids=append(fromids,which(V(fullgraph)$CP==cp))}
length(fromids)
NEtus
toids = c();for(fac in c("P1","P7","P4","P8","P10","P12","UPEM")){toids = append(toids,which(V(fullgraph)$pointname==fac))}
toids
factimes = distances(graph = fullgraph,from = fromids,to = toids,weights = E(fullgraph)$speed*E(fullgraph)$length)
help(distance)
help(distances)
factimes = distances(graph = fullgraph,v = fromids,to = toids,weights = E(fullgraph)$speed*E(fullgraph)$length)
factimes
factimes = round(factimes / 5)*5
factimes
factimes = distances(graph = fullgraph,v = fromids,to = toids,weights = E(fullgraph)$speed*E(fullgraph)$length)
factimes = round(factimes)
factimes
names(d)
min(d[,è:13])
min(d[,7:13])
max(d[,7:13])
synth
factimes = distances(graph = fullgraph,v = fromids,to = toids,weights = E(fullgraph)$speed*E(fullgraph)$length)
factimes = round(factimes)
#min(d[,7:13])
# -> a bit underestimated, add 10 minutes
factimes = factimes + 10
synth=cbind(synth,factimes)
colnames(synth)[3:9]<-c("P1","P7","P4","P8","P10","P12","UPEM")
synth
times=data.frame(tpsmin=c(data2016$TpsUniv_min,d$TpsP7),tpsmax=c(data2016$TpsUniv_max,d$MaxTps))
est = lm(tpsmax~tpsmin,times)
#hist(est$residuals,breaks=30)
synth$MaxTps = synth$TpsP7 * est$coefficients[2] + sample(x=est$residuals,size=NEtus,replace=TRUE)
# round at 5 min
synth$MaxTps = round(synth$MaxTps / 5)*5
synth$TpsP7=synth$P7
times=data.frame(tpsmin=c(data2016$TpsUniv_min,d$TpsP7),tpsmax=c(data2016$TpsUniv_max,d$MaxTps))
est = lm(tpsmax~tpsmin,times)
#hist(est$residuals,breaks=30)
synth$MaxTps = synth$TpsP7 * est$coefficients[2] + sample(x=est$residuals,size=NEtus,replace=TRUE)
# round at 5 min
synth$MaxTps = round(synth$MaxTps / 5)*5
est = lm(avgtps~tpsmin,data.frame(avgtps=d$AvgTps,tpsmin=d$TpsP7))
# interesting : they actually take less time than the "min" time (ratp times)
synth$AvgTps = synth$TpsP7 * est$coefficients[2] + sample(x=est$residuals,size=NEtus,replace=TRUE)
synth$AvgTps = round(synth$AvgTps / 5)*5
synth
tabfamille = table(rbind(data2016[,c("DEPRES","Famille")],d[,c("DEPRES","Famille")]))
# -> for Paris, clear proportion out of family, for petite couronne, small chance also
#  just draw conditionnaly to the contingency table
synth$Famille = sapply(synth$DEPRES,function(dep){ifelse(runif(1)<tabfamille[dep,1]/(tabfamille[dep,1]+tabfamille[dep,2]),"Non","Oui")})
synth$DEPRES = sapply(synth$Domcode,function(s){substr(s,1,2)})
tabfamille = table(rbind(data2016[,c("DEPRES","Famille")],d[,c("DEPRES","Famille")]))
# -> for Paris, clear proportion out of family, for petite couronne, small chance also
#  just draw conditionnaly to the contingency table
synth$Famille = sapply(synth$DEPRES,function(dep){ifelse(runif(1)<tabfamille[dep,1]/(tabfamille[dep,1]+tabfamille[dep,2]),"Non","Oui")})
library(mlogit)
cdata = data.frame(mode=c(data2016$ModeTransp,d$ModalChoice),famille = c(data2016$Famille,d$Famille),tpsmin=c(data2016$TpsUniv_min,d$TpsP7),tpsmax=c(data2016$TpsUniv_max,d$MaxTps))
mtable = table(as.character(cdata$mode))
rows =  cdata$mode%in%names(mtable)[mtable>3]
cdata$mode <- as.factor(cdata$mode)
choice <-  mlogit.data(cdata[rows,],shape="wide",choice="mode")
est = mlogit(mFormula(mode ~ 1 | tpsmin + tpsmax), data = choice)
summary(est)
est$coefficients
cdata$mode
cdata[rows,]
mtable
est$coefficients
est$coefficients["A pied (si plus de 10 minutes), Métro / RER, Bus:tpsmin"]
bMatroBusMin = est$coefficients["Métro / RER, Bus:tpsmin"]
bMetroBusMin = est$coefficients["Métro / RER, Bus:tpsmin"]
bPiedMetroMin = est$coefficients["A pied (si plus de 10 minutes), Métro / RER:tpsmin"]
bPiedMetroMax = est$coefficients["A pied (si plus de 10 minutes), Métro / RER:tpsmax"]
bPiedMetroBusMin=est$coefficients["A pied (si plus de 10 minutes), Métro / RER, Bus:tpsmin"]
bPiedMetroBusMax=est$coefficients["A pied (si plus de 10 minutes), Métro / RER, Bus:tpsmax"]
bMetroMin = est$coefficients["Métro / RER:tpsmin"]
bMetroMax = est$coefficients["Métro / RER:tpsmax"]
bMetroBusMin = est$coefficients["Métro / RER, Bus:tpsmin"]
bMetroBusMax = est$coefficients["Métro / RER, Bus:tpsmax"]
bMetroVoitMin = est$coefficients["Métro / RER, Bus, Voiture:tpsmin"]
bMetroVoitMax = est$coefficients["Métro / RER, Bus, Voiture:tpsmax"]
UPiedMetro = bPiedMetroMin*cdata$tpsmin + bPiedMetroMax*cdata$tpsmax
UPiedMetro
UPiedMetro = bPiedMetroMin*cdata$tpsmin + bPiedMetroMax*cdata$tpsmax
UPiedMetroBus = bPiedMetroBusMin*cdata$tpsmin + bPiedMetroBusMax*cdata$tpsmax
UMetro =  bMetroMin*cdata$tpsmin + bMetroMax*cdata$tpsmax
UMetroBus = bMetroBusMin*cdata$tpsmin + bMetroBusMax*cdata$tpsmax
UMetroVoit = bMetroVoitMin*cdata$tpsmin + bMetroVoitMax*cdata$tpsmax
etot = exp(UPiedMetro)+exp(UPiedMetroBus)+exp(UMetro)+exp(UMetroBus)+exp(UMetroVoit)
PPiedMetro = exp(UPiedMetro)/etot
PPiedMetro
synth
UPiedMetro = bPiedMetroMin*synth$TpsP7 + bPiedMetroMax*synth$MaxTps
UPiedMetroBus = bPiedMetroBusMin*synth$TpsP7 + bPiedMetroBusMax*synth$MaxTps
UMetro =  bMetroMin*synth$TpsP7 + bMetroMax*synth$MaxTps
UMetroBus = bMetroBusMin*synth$TpsP7 + bMetroBusMax*synth$MaxTps
UMetroVoit = bMetroVoitMin*synth$TpsP7 + bMetroVoitMax*synth$MaxTps
etot = exp(UPiedMetro)+exp(UPiedMetroBus)+exp(UMetro)+exp(UMetroBus)+exp(UMetroVoit)
PPiedMetro = exp(UPiedMetro)/etot
PPiedMetro
PPiedMetro = exp(UPiedMetro)/etot
PPiedMetroBus = exp(UPiedMetroBus)/etot
PMetro = exp(UMetro)/etot
PMetroBus = exp(UMetroBus)/etot
PMetroVoit = exp(UMetroVoit)/etot
PMetroVoit
table(data2016[,c("ModeTransp","PercepTransp")])
comtable = table(data2016[,c("ModeTransp","PercepTransp")])
rowSums(comtable)
help(cumsum)
apply(comtable,1,cumsum)
t(apply(comtable,1,cumsum))
probas = data.frame(PPiedMetro,PPiedMetroBus,PMetro,PMetroBus,PMetroVoit)
probas
t(apply(probas,1,cumsum))
cumprobas = t(apply(probas,1,cumsum))
colnames(cumprobas)<-c("A pied (si plus de 10 minutes), Métro / RER","A pied (si plus de 10 minutes), Métro / RER, Bus","Métro / RER","Métro / RER, Bus","Métro / RER, Bus, Voiture")
runif(NEtus)
timetable = cut(d$TpsP7,breaks = 5)
timetable = table(cut(d$TpsP7,breaks = 5),d$FacChoice)
timetable
grep("L'Université est proche de chez moi",d$FacChoice)
d$FacChoice
trmodes = c()
for(i in 1:NEtus){
found=FALSE;r=runif(1)
for(j in 1:ncol(cumprobas)){if(r>cumprobas[i,j]&!found){trmodes=append(trmodes,colnames(cumprobas)[j]);found=TRUE}}
}
trmodes
cumprobas[i,1]
# draw mode by hand
trmodes = c()
for(i in 1:NEtus){
found=FALSE;r=runif(1)
for(j in 1:ncol(cumprobas)){if(r<cumprobas[i,j]&!found){trmodes=append(trmodes,colnames(cumprobas)[j]);found=TRUE}}
}
trmodes
synth$ModalChoice = trmodes
length(d$FacChoice)
grep("L'Université est proche de chez moi",d$FacChoice)
distfactor = grep("L'Université est proche de chez moi",d$FacChoice)
distfactor = grep("L'Université est proche de chez moi",d$FacChoice)
distfactor
d$FacChoice%in%d$FacChoice[distfactor]
table(cut(d$TpsP7,breaks = 5),d$FacChoice%in%d$FacChoice[distfactor])
facchoice=c()
for(i in 1:NEtus){
if(synth$TpsP7<50){facchoice=append(facchoice,sample(d$FacChoice%in%d$FacChoice[distfactor],size=1))}
else{facchoice=append(facchoice,sample(d$FacChoice,size=1))}
}
synth$FacChoice = facchoice
warnings
warnings()
facchoice=c()
for(i in 1:NEtus){
if(synth$TpsP7[i]<50){facchoice=append(facchoice,sample(d$FacChoice%in%d$FacChoice[distfactor],size=1))}
else{facchoice=append(facchoice,sample(d$FacChoice,size=1))}
}
synth$FacChoice = facchoice
synth
write.table(synth,file='synth.csv',sep=";",quote="")
write.table(synth,file='synth.csv',sep=";",quote=FALSE)
